from flask import *
from app import db,requires_auth
from app.complains.models import Complain
from app.maps.models import Map
from app.dogs.models import Dog
mod_complains= Blueprint('complain', __name__)


@mod_complains.route('/addcomplain',methods=['POST'])
@requires_auth
def addComplain():
	if request.method=='POST':
		description=request.form['description']
		name=request.form['name']
		user_email=session['user_email']
		try:
			if not username or not description or not name:
				return jsonify(success=False),404
			newcomplain=Complain(user_email,description,name)
			db.session.add(newcomplain)
	    		db.session.commit()
            		return jsonify(success=True, complain=complain.serialize())
		except:
            		return jsonify(success=False),404

			
@mod_complains.route('/addcomplain',methods=['GET'])
@requires_auth
def addComplain():
        if request.method=='GET':
		out = Dog.query.filter_by(accepted=True).all()
		fin = [ele.obj() for ele in out]
		finee = [ele['name'] for ele in fin]
		return jsonify(names=finee)
@mod_complains.route('/complains',methods=['GET'])
@requires_auth
def get_all_Complains():
	user_email=session['user_email']
	out=Complain.query.all()
	fin={'complains' : [ele.obj() for ele in out]}
	return jsonify(fin)
@mod_complains.route('/complains/<id>',method=['POST'])
@requires_auth
def get_complains(id):
	user_email=session['user_email']
	out=Complain.query.all


@mod_todo.route('/complains/<id>/done', methods=['POST'])
@requires_auth
def mark_done(id):
	user_email= session['user_email']
	complain = Complain.query.filter(Complain.id == id, Complain.user_email == user_email).first()
	if complain is None:
		return jsonify(success=False), 404
	else:
		complain.done = True
		db.session.commit()
		return jsonify(success=True)

@mod_complains.route('/complains/<id>/delete',methods=['POST'])
@require_auth
def delete_complain(id):
	if request.method=='POST':
		user_email=session['user_email']
		complaint=Complain.query.filter_by(Complain.id == id, Complain.user_email == user_email).first()
		if complaint is None:
			return jsonify(success=False), 404
		else:
			db.session.delete(complaint)
			maps = Map.query.filter_by(Map.complain_id==id).all()
                	for m in maps:
				db.session.delete(m)
			db.session.commit()
		return jsonify(success=True)
	else:
		return jsonify(success=False), 404		


